/**
 * Freight Document primitiveization Application
 * This is the api reference for creation of 211, 210, and other EDI spec\'d shipping documents.
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: sam@freighttrust.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     *
     * @type {number}
     * @memberof ApiResponse
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof ApiResponse
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ApiResponse
     */
    message?: string;
}
/**
 *
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     *
     * @type {string}
     * @memberof Auth
     */
    signature: string;
}
/**
 *
 * @export
 * @interface Body
 */
export interface Body {
    /**
     *
     * @type {Auth}
     * @memberof Body
     */
    blockArrayAuth?: Auth;
    /**
     *
     * @type {Auth}
     * @memberof Body
     */
    senderAuth?: Auth;
}
/**
 *
 * @export
 * @interface Body1
 */
export interface Body1 {
    /**
     *
     * @type {Auth}
     * @memberof Body1
     */
    blockArrayAuth?: Auth;
    /**
     *
     * @type {Auth}
     * @memberof Body1
     */
    ownerAuth?: Auth;
    /**
     *
     * @type {Auth}
     * @memberof Body1
     */
    partAuth?: Auth;
}
/**
 *
 * @export
 * @interface Body2
 */
export interface Body2 {
    /**
     *
     * @type {Auth}
     * @memberof Body2
     */
    blockArrayAuth?: Auth;
    /**
     *
     * @type {Auth}
     * @memberof Body2
     */
    ownerAuth?: Auth;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns the current message Freight Trust needs to sign to verify their next post request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNonce: (options?: any) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns the current message Freight Trust needs to sign to verify their next post request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNonce(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns the current message Freight Trust needs to sign to verify their next post request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNonce(options?: any): AxiosPromise<ApiResponse>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Returns the current message Freight Trust needs to sign to verify their next post request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getNonce(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
}
/**
 * EDIPrimitiveApi - axios parameter creator
 * @export
 */
export declare const EDIPrimitiveApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change or reaffirm the approved address for an primitive
     * @param {string} approved The address being approved
     * @param {number} primitiveId The id of the primitive to be approved
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approve: (approved: string, primitiveId: number, auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Count all primitives assigned to an owner
     * @param {string} owner The address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceOf: (owner: string, options?: any) => Promise<RequestArgs>;
    /**
     * Allows Freight Trust to create a record with the signature of the owner and of the participant.
     * @summary Creates a new record
     * @param {string} recordID The identifying hash of the record
     * @param {string} owner The owner of the record
     * @param {string} participant The address of the participant in the record
     * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecord: (recordID: string, owner: string, participant: string, body1: Body1, options?: any) => Promise<RequestArgs>;
    /**
     * The approved address for this primitive, or the zero address if there is none
     * @summary Get the approved address for a single primitive
     * @param {number} primitiveId The primitive to find the approved address for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApprovedById: (primitiveId: number, options?: any) => Promise<RequestArgs>;
    /**
     * True if `operator` is an approved operator for `owner`, false otherwise
     * @summary Query if an address is an authorized operator for another address
     * @param {string} owner The address that owns the primitives
     * @param {string} operator The address that acts on behalf of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isApprovedForAll: (owner: string, operator: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the primitive contract\'s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    name: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Find the owner of an primitive
     * @param {number} primitiveId The Id of the primitive in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ownerOf: (primitiveId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
     * @param {number} index A counter less than &#x60;totalSupply()&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveByIndex: (index: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
     * @param {string} owner The address of the owner
     * @param {number} index The index of the primitive assigned to the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveOfOwnerByIndex: (owner: string, index: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Enumerate primitives assigned to an owner
     * @param {number} primitiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveURIById: (primitiveId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Transfers the ownership of an primitive from one address to another address
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {string} [extraData] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    safeTransferFrom: (from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
     * @summary Allows Freight Trust to issue univeral approval
     * @param {string} operator Address to add to the set of authorized operators
     * @param {boolean} approved True if the operator is approved, false to revoke approval
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setApprovalForAll: (operator: string, approved: boolean, auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
     * @summary Signed Transfer
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
     * @param {string} [data] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signedTransfer: (from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns an interface\'s support status
     * @param {number} interfaceId The Id of the interface to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supportsInterfaceById: (interfaceId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the primitive contract\'s symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbol: (options?: any) => Promise<RequestArgs>;
    /**
     * Returns the total supply of Non fungible primitives
     * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    totalSupply: (options?: any) => Promise<RequestArgs>;
    /**
     * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @summary Transfer ownership of an primitive without safety checks
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferFrom: (from: string, to: string, primitiveId: number, auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     * Allows Freight Trust to version one of the records they own.
     * @summary Versions a record for Freight Trust
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Auth} auth The Freight Trust nonce signature to verify this action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionRecord: (current: string, _new: string, auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     * Allows Freight Trust to version a record for the owner using the owner\'s signature.
     * @summary Versions a record for the owner
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
     * @param {string} [owner] The owner of the record which will be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionRecordSigned: (current: string, _new: string, body2: Body2, owner?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * EDIPrimitiveApi - functional programming interface
 * @export
 */
export declare const EDIPrimitiveApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change or reaffirm the approved address for an primitive
     * @param {string} approved The address being approved
     * @param {number} primitiveId The id of the primitive to be approved
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approve(approved: string, primitiveId: number, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Count all primitives assigned to an owner
     * @param {string} owner The address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceOf(owner: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Allows Freight Trust to create a record with the signature of the owner and of the participant.
     * @summary Creates a new record
     * @param {string} recordID The identifying hash of the record
     * @param {string} owner The owner of the record
     * @param {string} participant The address of the participant in the record
     * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecord(recordID: string, owner: string, participant: string, body1: Body1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * The approved address for this primitive, or the zero address if there is none
     * @summary Get the approved address for a single primitive
     * @param {number} primitiveId The primitive to find the approved address for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApprovedById(primitiveId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * True if `operator` is an approved operator for `owner`, false otherwise
     * @summary Query if an address is an authorized operator for another address
     * @param {string} owner The address that owns the primitives
     * @param {string} operator The address that acts on behalf of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isApprovedForAll(owner: string, operator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive contract\'s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    name(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Find the owner of an primitive
     * @param {number} primitiveId The Id of the primitive in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ownerOf(primitiveId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
     * @param {number} index A counter less than &#x60;totalSupply()&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveByIndex(index: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
     * @param {string} owner The address of the owner
     * @param {number} index The index of the primitive assigned to the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveOfOwnerByIndex(owner: string, index: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Enumerate primitives assigned to an owner
     * @param {number} primitiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveURIById(primitiveId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Transfers the ownership of an primitive from one address to another address
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {string} [extraData] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    safeTransferFrom(from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
     * @summary Allows Freight Trust to issue univeral approval
     * @param {string} operator Address to add to the set of authorized operators
     * @param {boolean} approved True if the operator is approved, false to revoke approval
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setApprovalForAll(operator: string, approved: boolean, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
     * @summary Signed Transfer
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
     * @param {string} [data] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signedTransfer(from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Returns an interface\'s support status
     * @param {number} interfaceId The Id of the interface to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supportsInterfaceById(interfaceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive contract\'s symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbol(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Returns the total supply of Non fungible primitives
     * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    totalSupply(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @summary Transfer ownership of an primitive without safety checks
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferFrom(from: string, to: string, primitiveId: number, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Allows Freight Trust to version one of the records they own.
     * @summary Versions a record for Freight Trust
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Auth} auth The Freight Trust nonce signature to verify this action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionRecord(current: string, _new: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Allows Freight Trust to version a record for the owner using the owner\'s signature.
     * @summary Versions a record for the owner
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
     * @param {string} [owner] The owner of the record which will be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionRecordSigned(current: string, _new: string, body2: Body2, owner?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * EDIPrimitiveApi - factory interface
 * @export
 */
export declare const EDIPrimitiveApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change or reaffirm the approved address for an primitive
     * @param {string} approved The address being approved
     * @param {number} primitiveId The id of the primitive to be approved
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approve(approved: string, primitiveId: number, auth: Auth, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Count all primitives assigned to an owner
     * @param {string} owner The address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceOf(owner: string, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Allows Freight Trust to create a record with the signature of the owner and of the participant.
     * @summary Creates a new record
     * @param {string} recordID The identifying hash of the record
     * @param {string} owner The owner of the record
     * @param {string} participant The address of the participant in the record
     * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRecord(recordID: string, owner: string, participant: string, body1: Body1, options?: any): AxiosPromise<ApiResponse>;
    /**
     * The approved address for this primitive, or the zero address if there is none
     * @summary Get the approved address for a single primitive
     * @param {number} primitiveId The primitive to find the approved address for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApprovedById(primitiveId: number, options?: any): AxiosPromise<ApiResponse>;
    /**
     * True if `operator` is an approved operator for `owner`, false otherwise
     * @summary Query if an address is an authorized operator for another address
     * @param {string} owner The address that owns the primitives
     * @param {string} operator The address that acts on behalf of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isApprovedForAll(owner: string, operator: string, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Returns the primitive contract\'s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    name(options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Find the owner of an primitive
     * @param {number} primitiveId The Id of the primitive in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ownerOf(primitiveId: number, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
     * @param {number} index A counter less than &#x60;totalSupply()&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveByIndex(index: number, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
     * @param {string} owner The address of the owner
     * @param {number} index The index of the primitive assigned to the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveOfOwnerByIndex(owner: string, index: number, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Enumerate primitives assigned to an owner
     * @param {number} primitiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    primitiveURIById(primitiveId: number, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Transfers the ownership of an primitive from one address to another address
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {string} [extraData] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    safeTransferFrom(from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
     * @summary Allows Freight Trust to issue univeral approval
     * @param {string} operator Address to add to the set of authorized operators
     * @param {boolean} approved True if the operator is approved, false to revoke approval
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setApprovalForAll(operator: string, approved: boolean, auth: Auth, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
     * @summary Signed Transfer
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
     * @param {string} [data] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signedTransfer(from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Returns an interface\'s support status
     * @param {number} interfaceId The Id of the interface to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supportsInterfaceById(interfaceId: number, options?: any): AxiosPromise<ApiResponse>;
    /**
     *
     * @summary Returns the primitive contract\'s symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbol(options?: any): AxiosPromise<ApiResponse>;
    /**
     * Returns the total supply of Non fungible primitives
     * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    totalSupply(options?: any): AxiosPromise<ApiResponse>;
    /**
     * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @summary Transfer ownership of an primitive without safety checks
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferFrom(from: string, to: string, primitiveId: number, auth: Auth, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Allows Freight Trust to version one of the records they own.
     * @summary Versions a record for Freight Trust
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Auth} auth The Freight Trust nonce signature to verify this action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionRecord(current: string, _new: string, auth: Auth, options?: any): AxiosPromise<void>;
    /**
     * Allows Freight Trust to version a record for the owner using the owner\'s signature.
     * @summary Versions a record for the owner
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
     * @param {string} [owner] The owner of the record which will be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionRecordSigned(current: string, _new: string, body2: Body2, owner?: string, options?: any): AxiosPromise<void>;
};
/**
 * EDIPrimitiveApi - object-oriented interface
 * @export
 * @class EDIPrimitiveApi
 * @extends {BaseAPI}
 */
export declare class EDIPrimitiveApi extends BaseAPI {
    /**
     *
     * @summary Change or reaffirm the approved address for an primitive
     * @param {string} approved The address being approved
     * @param {number} primitiveId The id of the primitive to be approved
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    approve(approved: string, primitiveId: number, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Count all primitives assigned to an owner
     * @param {string} owner The address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    balanceOf(owner: string, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Allows Freight Trust to create a record with the signature of the owner and of the participant.
     * @summary Creates a new record
     * @param {string} recordID The identifying hash of the record
     * @param {string} owner The owner of the record
     * @param {string} participant The address of the participant in the record
     * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    createRecord(recordID: string, owner: string, participant: string, body1: Body1, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * The approved address for this primitive, or the zero address if there is none
     * @summary Get the approved address for a single primitive
     * @param {number} primitiveId The primitive to find the approved address for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    getApprovedById(primitiveId: number, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * True if `operator` is an approved operator for `owner`, false otherwise
     * @summary Query if an address is an authorized operator for another address
     * @param {string} owner The address that owns the primitives
     * @param {string} operator The address that acts on behalf of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    isApprovedForAll(owner: string, operator: string, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive contract\'s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    name(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Find the owner of an primitive
     * @param {number} primitiveId The Id of the primitive in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    ownerOf(primitiveId: number, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
     * @param {number} index A counter less than &#x60;totalSupply()&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    primitiveByIndex(index: number, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
     * @param {string} owner The address of the owner
     * @param {number} index The index of the primitive assigned to the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    primitiveOfOwnerByIndex(owner: string, index: number, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Enumerate primitives assigned to an owner
     * @param {number} primitiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    primitiveURIById(primitiveId: number, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Transfers the ownership of an primitive from one address to another address
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {string} [extraData] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    safeTransferFrom(from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
     * @summary Allows Freight Trust to issue univeral approval
     * @param {string} operator Address to add to the set of authorized operators
     * @param {boolean} approved True if the operator is approved, false to revoke approval
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    setApprovalForAll(operator: string, approved: boolean, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
     * @summary Signed Transfer
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
     * @param {string} [data] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    signedTransfer(from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Returns an interface\'s support status
     * @param {number} interfaceId The Id of the interface to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    supportsInterfaceById(interfaceId: number, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     *
     * @summary Returns the primitive contract\'s symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    symbol(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Returns the total supply of Non fungible primitives
     * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    totalSupply(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @summary Transfer ownership of an primitive without safety checks
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    transferFrom(from: string, to: string, primitiveId: number, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Allows Freight Trust to version one of the records they own.
     * @summary Versions a record for Freight Trust
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Auth} auth The Freight Trust nonce signature to verify this action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    versionRecord(current: string, _new: string, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Allows Freight Trust to version a record for the owner using the owner\'s signature.
     * @summary Versions a record for the owner
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
     * @param {string} [owner] The owner of the record which will be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    versionRecordSigned(current: string, _new: string, body2: Body2, owner?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * ProxyAndUpgradeApi - axios parameter creator
 * @export
 */
export declare const ProxyAndUpgradeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sets the new controller address.
     * @summary Sets the the new controller address
     * @param {string} newController The new controller address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeController: (newController: string, auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} newMaster The new master address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMaster: (newMaster: string, auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     * Gets the address of the controler contract.
     * @summary Gets address of the controler Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getControler: (options?: any) => Promise<RequestArgs>;
    /**
     * Gets the address of the master contract.
     * @summary Gets address of the Master Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaster: (options?: any) => Promise<RequestArgs>;
    /**
     * Gets address that is delegate called to run a function\'s logic.
     * @summary Gets address of Function
     * @param {string} id The function selector the return the target of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTarget: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     * Gets the address of the Universal Proxy contract.
     * @summary Gets address of the Universal Proxy Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUniversalProxy: (options?: any) => Promise<RequestArgs>;
    /**
     * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
     * @summary Pauses the execution
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pause: (auth: Auth, options?: any) => Promise<RequestArgs>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} id Function selector whose target to change.
     * @param {string} target The address to set the function too
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTarget: (id: string, target: string, auth: Auth, options?: any) => Promise<RequestArgs>;
};
/**
 * ProxyAndUpgradeApi - functional programming interface
 * @export
 */
export declare const ProxyAndUpgradeApiFp: (configuration?: Configuration) => {
    /**
     * Sets the new controller address.
     * @summary Sets the the new controller address
     * @param {string} newController The new controller address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeController(newController: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} newMaster The new master address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMaster(newMaster: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Gets the address of the controler contract.
     * @summary Gets address of the controler Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getControler(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Gets the address of the master contract.
     * @summary Gets address of the Master Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaster(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Gets address that is delegate called to run a function\'s logic.
     * @summary Gets address of Function
     * @param {string} id The function selector the return the target of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTarget(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Gets the address of the Universal Proxy contract.
     * @summary Gets address of the Universal Proxy Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUniversalProxy(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
     * @summary Pauses the execution
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pause(auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} id Function selector whose target to change.
     * @param {string} target The address to set the function too
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTarget(id: string, target: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
};
/**
 * ProxyAndUpgradeApi - factory interface
 * @export
 */
export declare const ProxyAndUpgradeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sets the new controller address.
     * @summary Sets the the new controller address
     * @param {string} newController The new controller address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeController(newController: string, auth: Auth, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} newMaster The new master address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMaster(newMaster: string, auth: Auth, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Gets the address of the controler contract.
     * @summary Gets address of the controler Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getControler(options?: any): AxiosPromise<ApiResponse>;
    /**
     * Gets the address of the master contract.
     * @summary Gets address of the Master Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaster(options?: any): AxiosPromise<ApiResponse>;
    /**
     * Gets address that is delegate called to run a function\'s logic.
     * @summary Gets address of Function
     * @param {string} id The function selector the return the target of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTarget(id: string, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Gets the address of the Universal Proxy contract.
     * @summary Gets address of the Universal Proxy Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUniversalProxy(options?: any): AxiosPromise<ApiResponse>;
    /**
     * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
     * @summary Pauses the execution
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pause(auth: Auth, options?: any): AxiosPromise<ApiResponse>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} id Function selector whose target to change.
     * @param {string} target The address to set the function too
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setTarget(id: string, target: string, auth: Auth, options?: any): AxiosPromise<ApiResponse>;
};
/**
 * ProxyAndUpgradeApi - object-oriented interface
 * @export
 * @class ProxyAndUpgradeApi
 * @extends {BaseAPI}
 */
export declare class ProxyAndUpgradeApi extends BaseAPI {
    /**
     * Sets the new controller address.
     * @summary Sets the the new controller address
     * @param {string} newController The new controller address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    changeController(newController: string, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} newMaster The new master address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    changeMaster(newMaster: string, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Gets the address of the controler contract.
     * @summary Gets address of the controler Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    getControler(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Gets the address of the master contract.
     * @summary Gets address of the Master Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    getMaster(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Gets address that is delegate called to run a function\'s logic.
     * @summary Gets address of Function
     * @param {string} id The function selector the return the target of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    getTarget(id: string, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Gets the address of the Universal Proxy contract.
     * @summary Gets address of the Universal Proxy Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    getUniversalProxy(options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
     * @summary Pauses the execution
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    pause(auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} id Function selector whose target to change.
     * @param {string} target The address to set the function too
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    setTarget(id: string, target: string, auth: Auth, options?: any): Promise<import("axios").AxiosResponse<ApiResponse>>;
}
