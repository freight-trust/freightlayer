"use strict";
// tslint:disable
/**
 * Freight Document primitiveization Application
 * This is the api reference for creation of 211, 210, and other EDI spec\'d shipping documents.
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: sam@freighttrust.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyAndUpgradeApi = exports.ProxyAndUpgradeApiFactory = exports.ProxyAndUpgradeApiFp = exports.ProxyAndUpgradeApiAxiosParamCreator = exports.EDIPrimitiveApi = exports.EDIPrimitiveApiFactory = exports.EDIPrimitiveApiFp = exports.EDIPrimitiveApiAxiosParamCreator = exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
exports.DefaultApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Returns the current message Freight Trust needs to sign to verify their next post request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/getNonce";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Returns the current message Freight Trust needs to sign to verify their next post request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).getNonce(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Returns the current message Freight Trust needs to sign to verify their next post request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce: function (options) {
            return exports.DefaultApiFp(configuration).getNonce(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Returns the current message Freight Trust needs to sign to verify their next post request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getNonce = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).getNonce(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DefaultApi;
}(base_1.BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * EDIPrimitiveApi - axios parameter creator
 * @export
 */
exports.EDIPrimitiveApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Change or reaffirm the approved address for an primitive
         * @param {string} approved The address being approved
         * @param {number} primitiveId The id of the primitive to be approved
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: function (approved, primitiveId, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'approved' is not null or undefined
                    if (approved === null || approved === undefined) {
                        throw new base_1.RequiredError('approved', 'Required parameter approved was null or undefined when calling approve.');
                    }
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling approve.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling approve.');
                    }
                    localVarPath = "/primitive/approve/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (approved !== undefined) {
                        localVarQueryParameter['approved'] = approved;
                    }
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Count all primitives assigned to an owner
         * @param {string} owner The address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceOf: function (owner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'owner' is not null or undefined
                    if (owner === null || owner === undefined) {
                        throw new base_1.RequiredError('owner', 'Required parameter owner was null or undefined when calling balanceOf.');
                    }
                    localVarPath = "/primitive/balanceOf/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (owner !== undefined) {
                        localVarQueryParameter['owner'] = owner;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Allows Freight Trust to create a record with the signature of the owner and of the participant.
         * @summary Creates a new record
         * @param {string} recordID The identifying hash of the record
         * @param {string} owner The owner of the record
         * @param {string} participant The address of the participant in the record
         * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: function (recordID, owner, participant, body1, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'recordID' is not null or undefined
                    if (recordID === null || recordID === undefined) {
                        throw new base_1.RequiredError('recordID', 'Required parameter recordID was null or undefined when calling createRecord.');
                    }
                    // verify required parameter 'owner' is not null or undefined
                    if (owner === null || owner === undefined) {
                        throw new base_1.RequiredError('owner', 'Required parameter owner was null or undefined when calling createRecord.');
                    }
                    // verify required parameter 'participant' is not null or undefined
                    if (participant === null || participant === undefined) {
                        throw new base_1.RequiredError('participant', 'Required parameter participant was null or undefined when calling createRecord.');
                    }
                    // verify required parameter 'body1' is not null or undefined
                    if (body1 === null || body1 === undefined) {
                        throw new base_1.RequiredError('body1', 'Required parameter body1 was null or undefined when calling createRecord.');
                    }
                    localVarPath = "/primitive/createRecord/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (recordID !== undefined) {
                        localVarQueryParameter['recordID'] = recordID;
                    }
                    if (owner !== undefined) {
                        localVarQueryParameter['owner'] = owner;
                    }
                    if (participant !== undefined) {
                        localVarQueryParameter['participant'] = participant;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body1 !== undefined ? body1 : {}) : (body1 || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * The approved address for this primitive, or the zero address if there is none
         * @summary Get the approved address for a single primitive
         * @param {number} primitiveId The primitive to find the approved address for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedById: function (primitiveId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling getApprovedById.');
                    }
                    localVarPath = "/primitive/getApproved/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * True if `operator` is an approved operator for `owner`, false otherwise
         * @summary Query if an address is an authorized operator for another address
         * @param {string} owner The address that owns the primitives
         * @param {string} operator The address that acts on behalf of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isApprovedForAll: function (owner, operator, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'owner' is not null or undefined
                    if (owner === null || owner === undefined) {
                        throw new base_1.RequiredError('owner', 'Required parameter owner was null or undefined when calling isApprovedForAll.');
                    }
                    // verify required parameter 'operator' is not null or undefined
                    if (operator === null || operator === undefined) {
                        throw new base_1.RequiredError('operator', 'Required parameter operator was null or undefined when calling isApprovedForAll.');
                    }
                    localVarPath = "/primitive/isApprovedForAll/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (owner !== undefined) {
                        localVarQueryParameter['owner'] = owner;
                    }
                    if (operator !== undefined) {
                        localVarQueryParameter['operator'] = operator;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns the primitive contract\'s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        name: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/primitive/name";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Find the owner of an primitive
         * @param {number} primitiveId The Id of the primitive in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf: function (primitiveId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling ownerOf.');
                    }
                    localVarPath = "/primitive/ownerOf/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
         * @param {number} index A counter less than &#x60;totalSupply()&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveByIndex: function (index, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'index' is not null or undefined
                    if (index === null || index === undefined) {
                        throw new base_1.RequiredError('index', 'Required parameter index was null or undefined when calling primitiveByIndex.');
                    }
                    localVarPath = "/primitive/primitiveByIndex/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (index !== undefined) {
                        localVarQueryParameter['index'] = index;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
         * @param {string} owner The address of the owner
         * @param {number} index The index of the primitive assigned to the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveOfOwnerByIndex: function (owner, index, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'owner' is not null or undefined
                    if (owner === null || owner === undefined) {
                        throw new base_1.RequiredError('owner', 'Required parameter owner was null or undefined when calling primitiveOfOwnerByIndex.');
                    }
                    // verify required parameter 'index' is not null or undefined
                    if (index === null || index === undefined) {
                        throw new base_1.RequiredError('index', 'Required parameter index was null or undefined when calling primitiveOfOwnerByIndex.');
                    }
                    localVarPath = "/primitive/primitiveOfOwnerByIndex/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (owner !== undefined) {
                        localVarQueryParameter['owner'] = owner;
                    }
                    if (index !== undefined) {
                        localVarQueryParameter['index'] = index;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Enumerate primitives assigned to an owner
         * @param {number} primitiveId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveURIById: function (primitiveId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling primitiveURIById.');
                    }
                    localVarPath = "/primitive/primitiveURI/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Transfers the ownership of an primitive from one address to another address
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {string} [extraData] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        safeTransferFrom: function (from, to, primitiveId, auth, extraData, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'from' is not null or undefined
                    if (from === null || from === undefined) {
                        throw new base_1.RequiredError('from', 'Required parameter from was null or undefined when calling safeTransferFrom.');
                    }
                    // verify required parameter 'to' is not null or undefined
                    if (to === null || to === undefined) {
                        throw new base_1.RequiredError('to', 'Required parameter to was null or undefined when calling safeTransferFrom.');
                    }
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling safeTransferFrom.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling safeTransferFrom.');
                    }
                    localVarPath = "/primitive/safeTransferFrom/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (from !== undefined) {
                        localVarQueryParameter['from'] = from;
                    }
                    if (to !== undefined) {
                        localVarQueryParameter['to'] = to;
                    }
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    if (extraData !== undefined) {
                        localVarQueryParameter['extraData'] = extraData;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
         * @summary Allows Freight Trust to issue univeral approval
         * @param {string} operator Address to add to the set of authorized operators
         * @param {boolean} approved True if the operator is approved, false to revoke approval
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setApprovalForAll: function (operator, approved, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'operator' is not null or undefined
                    if (operator === null || operator === undefined) {
                        throw new base_1.RequiredError('operator', 'Required parameter operator was null or undefined when calling setApprovalForAll.');
                    }
                    // verify required parameter 'approved' is not null or undefined
                    if (approved === null || approved === undefined) {
                        throw new base_1.RequiredError('approved', 'Required parameter approved was null or undefined when calling setApprovalForAll.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling setApprovalForAll.');
                    }
                    localVarPath = "/primitive/setApprovalForAll/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (operator !== undefined) {
                        localVarQueryParameter['operator'] = operator;
                    }
                    if (approved !== undefined) {
                        localVarQueryParameter['approved'] = approved;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
         * @summary Signed Transfer
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
         * @param {string} [data] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTransfer: function (from, to, primitiveId, body, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'from' is not null or undefined
                    if (from === null || from === undefined) {
                        throw new base_1.RequiredError('from', 'Required parameter from was null or undefined when calling signedTransfer.');
                    }
                    // verify required parameter 'to' is not null or undefined
                    if (to === null || to === undefined) {
                        throw new base_1.RequiredError('to', 'Required parameter to was null or undefined when calling signedTransfer.');
                    }
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling signedTransfer.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling signedTransfer.');
                    }
                    localVarPath = "/primitive/signedTransfer/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (from !== undefined) {
                        localVarQueryParameter['from'] = from;
                    }
                    if (to !== undefined) {
                        localVarQueryParameter['to'] = to;
                    }
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    if (data !== undefined) {
                        localVarQueryParameter['data'] = data;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns an interface\'s support status
         * @param {number} interfaceId The Id of the interface to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportsInterfaceById: function (interfaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'interfaceId' is not null or undefined
                    if (interfaceId === null || interfaceId === undefined) {
                        throw new base_1.RequiredError('interfaceId', 'Required parameter interfaceId was null or undefined when calling supportsInterfaceById.');
                    }
                    localVarPath = "/primitive/supportsInterface/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (interfaceId !== undefined) {
                        localVarQueryParameter['interfaceId'] = interfaceId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns the primitive contract\'s symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbol: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/primitive/symbol";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns the total supply of Non fungible primitives
         * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/primitive/totalSupply";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
         * @summary Transfer ownership of an primitive without safety checks
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFrom: function (from, to, primitiveId, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'from' is not null or undefined
                    if (from === null || from === undefined) {
                        throw new base_1.RequiredError('from', 'Required parameter from was null or undefined when calling transferFrom.');
                    }
                    // verify required parameter 'to' is not null or undefined
                    if (to === null || to === undefined) {
                        throw new base_1.RequiredError('to', 'Required parameter to was null or undefined when calling transferFrom.');
                    }
                    // verify required parameter 'primitiveId' is not null or undefined
                    if (primitiveId === null || primitiveId === undefined) {
                        throw new base_1.RequiredError('primitiveId', 'Required parameter primitiveId was null or undefined when calling transferFrom.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling transferFrom.');
                    }
                    localVarPath = "/primitive/transferFrom/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (from !== undefined) {
                        localVarQueryParameter['from'] = from;
                    }
                    if (to !== undefined) {
                        localVarQueryParameter['to'] = to;
                    }
                    if (primitiveId !== undefined) {
                        localVarQueryParameter['primitiveId'] = primitiveId;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Allows Freight Trust to version one of the records they own.
         * @summary Versions a record for Freight Trust
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Auth} auth The Freight Trust nonce signature to verify this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecord: function (current, _new, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'current' is not null or undefined
                    if (current === null || current === undefined) {
                        throw new base_1.RequiredError('current', 'Required parameter current was null or undefined when calling versionRecord.');
                    }
                    // verify required parameter '_new' is not null or undefined
                    if (_new === null || _new === undefined) {
                        throw new base_1.RequiredError('_new', 'Required parameter _new was null or undefined when calling versionRecord.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling versionRecord.');
                    }
                    localVarPath = "/primitive/versionRecord/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (current !== undefined) {
                        localVarQueryParameter['current'] = current;
                    }
                    if (_new !== undefined) {
                        localVarQueryParameter['new'] = _new;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Allows Freight Trust to version a record for the owner using the owner\'s signature.
         * @summary Versions a record for the owner
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
         * @param {string} [owner] The owner of the record which will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecordSigned: function (current, _new, body2, owner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'current' is not null or undefined
                    if (current === null || current === undefined) {
                        throw new base_1.RequiredError('current', 'Required parameter current was null or undefined when calling versionRecordSigned.');
                    }
                    // verify required parameter '_new' is not null or undefined
                    if (_new === null || _new === undefined) {
                        throw new base_1.RequiredError('_new', 'Required parameter _new was null or undefined when calling versionRecordSigned.');
                    }
                    // verify required parameter 'body2' is not null or undefined
                    if (body2 === null || body2 === undefined) {
                        throw new base_1.RequiredError('body2', 'Required parameter body2 was null or undefined when calling versionRecordSigned.');
                    }
                    localVarPath = "/primitive/versionRecord/signed/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (current !== undefined) {
                        localVarQueryParameter['current'] = current;
                    }
                    if (_new !== undefined) {
                        localVarQueryParameter['new'] = _new;
                    }
                    if (owner !== undefined) {
                        localVarQueryParameter['owner'] = owner;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof body2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(body2 !== undefined ? body2 : {}) : (body2 || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * EDIPrimitiveApi - functional programming interface
 * @export
 */
exports.EDIPrimitiveApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Change or reaffirm the approved address for an primitive
         * @param {string} approved The address being approved
         * @param {number} primitiveId The id of the primitive to be approved
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: function (approved, primitiveId, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).approve(approved, primitiveId, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Count all primitives assigned to an owner
         * @param {string} owner The address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceOf: function (owner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).balanceOf(owner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Allows Freight Trust to create a record with the signature of the owner and of the participant.
         * @summary Creates a new record
         * @param {string} recordID The identifying hash of the record
         * @param {string} owner The owner of the record
         * @param {string} participant The address of the participant in the record
         * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: function (recordID, owner, participant, body1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).createRecord(recordID, owner, participant, body1, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * The approved address for this primitive, or the zero address if there is none
         * @summary Get the approved address for a single primitive
         * @param {number} primitiveId The primitive to find the approved address for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedById: function (primitiveId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).getApprovedById(primitiveId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * True if `operator` is an approved operator for `owner`, false otherwise
         * @summary Query if an address is an authorized operator for another address
         * @param {string} owner The address that owns the primitives
         * @param {string} operator The address that acts on behalf of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isApprovedForAll: function (owner, operator, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).isApprovedForAll(owner, operator, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns the primitive contract\'s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        name: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).name(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Find the owner of an primitive
         * @param {number} primitiveId The Id of the primitive in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf: function (primitiveId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).ownerOf(primitiveId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
         * @param {number} index A counter less than &#x60;totalSupply()&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveByIndex: function (index, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).primitiveByIndex(index, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
         * @param {string} owner The address of the owner
         * @param {number} index The index of the primitive assigned to the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveOfOwnerByIndex: function (owner, index, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).primitiveOfOwnerByIndex(owner, index, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Enumerate primitives assigned to an owner
         * @param {number} primitiveId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveURIById: function (primitiveId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).primitiveURIById(primitiveId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Transfers the ownership of an primitive from one address to another address
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {string} [extraData] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        safeTransferFrom: function (from, to, primitiveId, auth, extraData, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).safeTransferFrom(from, to, primitiveId, auth, extraData, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
         * @summary Allows Freight Trust to issue univeral approval
         * @param {string} operator Address to add to the set of authorized operators
         * @param {boolean} approved True if the operator is approved, false to revoke approval
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setApprovalForAll: function (operator, approved, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).setApprovalForAll(operator, approved, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
         * @summary Signed Transfer
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
         * @param {string} [data] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTransfer: function (from, to, primitiveId, body, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).signedTransfer(from, to, primitiveId, body, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns an interface\'s support status
         * @param {number} interfaceId The Id of the interface to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportsInterfaceById: function (interfaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).supportsInterfaceById(interfaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns the primitive contract\'s symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbol: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).symbol(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Returns the total supply of Non fungible primitives
         * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).totalSupply(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
         * @summary Transfer ownership of an primitive without safety checks
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFrom: function (from, to, primitiveId, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).transferFrom(from, to, primitiveId, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Allows Freight Trust to version one of the records they own.
         * @summary Versions a record for Freight Trust
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Auth} auth The Freight Trust nonce signature to verify this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecord: function (current, _new, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).versionRecord(current, _new, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Allows Freight Trust to version a record for the owner using the owner\'s signature.
         * @summary Versions a record for the owner
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
         * @param {string} [owner] The owner of the record which will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecordSigned: function (current, _new, body2, owner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.EDIPrimitiveApiAxiosParamCreator(configuration).versionRecordSigned(current, _new, body2, owner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EDIPrimitiveApi - factory interface
 * @export
 */
exports.EDIPrimitiveApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Change or reaffirm the approved address for an primitive
         * @param {string} approved The address being approved
         * @param {number} primitiveId The id of the primitive to be approved
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: function (approved, primitiveId, auth, options) {
            return exports.EDIPrimitiveApiFp(configuration).approve(approved, primitiveId, auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Count all primitives assigned to an owner
         * @param {string} owner The address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceOf: function (owner, options) {
            return exports.EDIPrimitiveApiFp(configuration).balanceOf(owner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Allows Freight Trust to create a record with the signature of the owner and of the participant.
         * @summary Creates a new record
         * @param {string} recordID The identifying hash of the record
         * @param {string} owner The owner of the record
         * @param {string} participant The address of the participant in the record
         * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: function (recordID, owner, participant, body1, options) {
            return exports.EDIPrimitiveApiFp(configuration).createRecord(recordID, owner, participant, body1, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The approved address for this primitive, or the zero address if there is none
         * @summary Get the approved address for a single primitive
         * @param {number} primitiveId The primitive to find the approved address for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedById: function (primitiveId, options) {
            return exports.EDIPrimitiveApiFp(configuration).getApprovedById(primitiveId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * True if `operator` is an approved operator for `owner`, false otherwise
         * @summary Query if an address is an authorized operator for another address
         * @param {string} owner The address that owns the primitives
         * @param {string} operator The address that acts on behalf of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isApprovedForAll: function (owner, operator, options) {
            return exports.EDIPrimitiveApiFp(configuration).isApprovedForAll(owner, operator, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns the primitive contract\'s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        name: function (options) {
            return exports.EDIPrimitiveApiFp(configuration).name(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Find the owner of an primitive
         * @param {number} primitiveId The Id of the primitive in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf: function (primitiveId, options) {
            return exports.EDIPrimitiveApiFp(configuration).ownerOf(primitiveId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
         * @param {number} index A counter less than &#x60;totalSupply()&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveByIndex: function (index, options) {
            return exports.EDIPrimitiveApiFp(configuration).primitiveByIndex(index, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
         * @param {string} owner The address of the owner
         * @param {number} index The index of the primitive assigned to the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveOfOwnerByIndex: function (owner, index, options) {
            return exports.EDIPrimitiveApiFp(configuration).primitiveOfOwnerByIndex(owner, index, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Enumerate primitives assigned to an owner
         * @param {number} primitiveId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveURIById: function (primitiveId, options) {
            return exports.EDIPrimitiveApiFp(configuration).primitiveURIById(primitiveId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Transfers the ownership of an primitive from one address to another address
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {string} [extraData] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        safeTransferFrom: function (from, to, primitiveId, auth, extraData, options) {
            return exports.EDIPrimitiveApiFp(configuration).safeTransferFrom(from, to, primitiveId, auth, extraData, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
         * @summary Allows Freight Trust to issue univeral approval
         * @param {string} operator Address to add to the set of authorized operators
         * @param {boolean} approved True if the operator is approved, false to revoke approval
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setApprovalForAll: function (operator, approved, auth, options) {
            return exports.EDIPrimitiveApiFp(configuration).setApprovalForAll(operator, approved, auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
         * @summary Signed Transfer
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
         * @param {string} [data] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTransfer: function (from, to, primitiveId, body, data, options) {
            return exports.EDIPrimitiveApiFp(configuration).signedTransfer(from, to, primitiveId, body, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns an interface\'s support status
         * @param {number} interfaceId The Id of the interface to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportsInterfaceById: function (interfaceId, options) {
            return exports.EDIPrimitiveApiFp(configuration).supportsInterfaceById(interfaceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns the primitive contract\'s symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbol: function (options) {
            return exports.EDIPrimitiveApiFp(configuration).symbol(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the total supply of Non fungible primitives
         * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (options) {
            return exports.EDIPrimitiveApiFp(configuration).totalSupply(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
         * @summary Transfer ownership of an primitive without safety checks
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFrom: function (from, to, primitiveId, auth, options) {
            return exports.EDIPrimitiveApiFp(configuration).transferFrom(from, to, primitiveId, auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Allows Freight Trust to version one of the records they own.
         * @summary Versions a record for Freight Trust
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Auth} auth The Freight Trust nonce signature to verify this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecord: function (current, _new, auth, options) {
            return exports.EDIPrimitiveApiFp(configuration).versionRecord(current, _new, auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Allows Freight Trust to version a record for the owner using the owner\'s signature.
         * @summary Versions a record for the owner
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
         * @param {string} [owner] The owner of the record which will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecordSigned: function (current, _new, body2, owner, options) {
            return exports.EDIPrimitiveApiFp(configuration).versionRecordSigned(current, _new, body2, owner, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EDIPrimitiveApi - object-oriented interface
 * @export
 * @class EDIPrimitiveApi
 * @extends {BaseAPI}
 */
var EDIPrimitiveApi = /** @class */ (function (_super) {
    __extends(EDIPrimitiveApi, _super);
    function EDIPrimitiveApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Change or reaffirm the approved address for an primitive
     * @param {string} approved The address being approved
     * @param {number} primitiveId The id of the primitive to be approved
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.approve = function (approved, primitiveId, auth, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).approve(approved, primitiveId, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Count all primitives assigned to an owner
     * @param {string} owner The address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.balanceOf = function (owner, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).balanceOf(owner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Allows Freight Trust to create a record with the signature of the owner and of the participant.
     * @summary Creates a new record
     * @param {string} recordID The identifying hash of the record
     * @param {string} owner The owner of the record
     * @param {string} participant The address of the participant in the record
     * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.createRecord = function (recordID, owner, participant, body1, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).createRecord(recordID, owner, participant, body1, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The approved address for this primitive, or the zero address if there is none
     * @summary Get the approved address for a single primitive
     * @param {number} primitiveId The primitive to find the approved address for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.getApprovedById = function (primitiveId, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).getApprovedById(primitiveId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * True if `operator` is an approved operator for `owner`, false otherwise
     * @summary Query if an address is an authorized operator for another address
     * @param {string} owner The address that owns the primitives
     * @param {string} operator The address that acts on behalf of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.isApprovedForAll = function (owner, operator, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).isApprovedForAll(owner, operator, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns the primitive contract\'s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.name = function (options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).name(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Find the owner of an primitive
     * @param {number} primitiveId The Id of the primitive in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.ownerOf = function (primitiveId, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).ownerOf(primitiveId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
     * @param {number} index A counter less than &#x60;totalSupply()&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.primitiveByIndex = function (index, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).primitiveByIndex(index, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
     * @param {string} owner The address of the owner
     * @param {number} index The index of the primitive assigned to the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.primitiveOfOwnerByIndex = function (owner, index, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).primitiveOfOwnerByIndex(owner, index, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Enumerate primitives assigned to an owner
     * @param {number} primitiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.primitiveURIById = function (primitiveId, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).primitiveURIById(primitiveId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Transfers the ownership of an primitive from one address to another address
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {string} [extraData] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.safeTransferFrom = function (from, to, primitiveId, auth, extraData, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).safeTransferFrom(from, to, primitiveId, auth, extraData, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
     * @summary Allows Freight Trust to issue univeral approval
     * @param {string} operator Address to add to the set of authorized operators
     * @param {boolean} approved True if the operator is approved, false to revoke approval
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.setApprovalForAll = function (operator, approved, auth, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).setApprovalForAll(operator, approved, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
     * @summary Signed Transfer
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
     * @param {string} [data] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.signedTransfer = function (from, to, primitiveId, body, data, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).signedTransfer(from, to, primitiveId, body, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns an interface\'s support status
     * @param {number} interfaceId The Id of the interface to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.supportsInterfaceById = function (interfaceId, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).supportsInterfaceById(interfaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns the primitive contract\'s symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.symbol = function (options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).symbol(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the total supply of Non fungible primitives
     * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.totalSupply = function (options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).totalSupply(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @summary Transfer ownership of an primitive without safety checks
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.transferFrom = function (from, to, primitiveId, auth, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).transferFrom(from, to, primitiveId, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Allows Freight Trust to version one of the records they own.
     * @summary Versions a record for Freight Trust
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Auth} auth The Freight Trust nonce signature to verify this action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.versionRecord = function (current, _new, auth, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).versionRecord(current, _new, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Allows Freight Trust to version a record for the owner using the owner\'s signature.
     * @summary Versions a record for the owner
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
     * @param {string} [owner] The owner of the record which will be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    EDIPrimitiveApi.prototype.versionRecordSigned = function (current, _new, body2, owner, options) {
        var _this = this;
        return exports.EDIPrimitiveApiFp(this.configuration).versionRecordSigned(current, _new, body2, owner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EDIPrimitiveApi;
}(base_1.BaseAPI));
exports.EDIPrimitiveApi = EDIPrimitiveApi;
/**
 * ProxyAndUpgradeApi - axios parameter creator
 * @export
 */
exports.ProxyAndUpgradeApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Sets the new controller address.
         * @summary Sets the the new controller address
         * @param {string} newController The new controller address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeController: function (newController, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'newController' is not null or undefined
                    if (newController === null || newController === undefined) {
                        throw new base_1.RequiredError('newController', 'Required parameter newController was null or undefined when calling changeController.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling changeController.');
                    }
                    localVarPath = "/proxy/changeController/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (newController !== undefined) {
                        localVarQueryParameter['newController'] = newController;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} newMaster The new master address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMaster: function (newMaster, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'newMaster' is not null or undefined
                    if (newMaster === null || newMaster === undefined) {
                        throw new base_1.RequiredError('newMaster', 'Required parameter newMaster was null or undefined when calling changeMaster.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling changeMaster.');
                    }
                    localVarPath = "/proxy/changeMaster/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (newMaster !== undefined) {
                        localVarQueryParameter['newMaster'] = newMaster;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets the address of the controler contract.
         * @summary Gets address of the controler Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControler: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/proxy/getControler";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets the address of the master contract.
         * @summary Gets address of the Master Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaster: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/proxy/getMaster";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets address that is delegate called to run a function\'s logic.
         * @summary Gets address of Function
         * @param {string} id The function selector the return the target of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTarget: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getTarget.');
                    }
                    localVarPath = "/proxy/getTarget/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (id !== undefined) {
                        localVarQueryParameter['id'] = id;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets the address of the Universal Proxy contract.
         * @summary Gets address of the Universal Proxy Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalProxy: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/proxy/getUniversalProxy";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
         * @summary Pauses the execution
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: function (auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling pause.');
                    }
                    localVarPath = "/proxy/pause";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} id Function selector whose target to change.
         * @param {string} target The address to set the function too
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTarget: function (id, target, auth, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling setTarget.');
                    }
                    // verify required parameter 'target' is not null or undefined
                    if (target === null || target === undefined) {
                        throw new base_1.RequiredError('target', 'Required parameter target was null or undefined when calling setTarget.');
                    }
                    // verify required parameter 'auth' is not null or undefined
                    if (auth === null || auth === undefined) {
                        throw new base_1.RequiredError('auth', 'Required parameter auth was null or undefined when calling setTarget.');
                    }
                    localVarPath = "/proxy/setTarget/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (id !== undefined) {
                        localVarQueryParameter['id'] = id;
                    }
                    if (target !== undefined) {
                        localVarQueryParameter['target'] = target;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ProxyAndUpgradeApi - functional programming interface
 * @export
 */
exports.ProxyAndUpgradeApiFp = function (configuration) {
    return {
        /**
         * Sets the new controller address.
         * @summary Sets the the new controller address
         * @param {string} newController The new controller address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeController: function (newController, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).changeController(newController, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} newMaster The new master address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMaster: function (newMaster, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).changeMaster(newMaster, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Gets the address of the controler contract.
         * @summary Gets address of the controler Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControler: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).getControler(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Gets the address of the master contract.
         * @summary Gets address of the Master Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaster: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).getMaster(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Gets address that is delegate called to run a function\'s logic.
         * @summary Gets address of Function
         * @param {string} id The function selector the return the target of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTarget: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).getTarget(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Gets the address of the Universal Proxy contract.
         * @summary Gets address of the Universal Proxy Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalProxy: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).getUniversalProxy(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
         * @summary Pauses the execution
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: function (auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).pause(auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} id Function selector whose target to change.
         * @param {string} target The address to set the function too
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTarget: function (id, target, auth, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.ProxyAndUpgradeApiAxiosParamCreator(configuration).setTarget(id, target, auth, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ProxyAndUpgradeApi - factory interface
 * @export
 */
exports.ProxyAndUpgradeApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sets the new controller address.
         * @summary Sets the the new controller address
         * @param {string} newController The new controller address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeController: function (newController, auth, options) {
            return exports.ProxyAndUpgradeApiFp(configuration).changeController(newController, auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} newMaster The new master address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMaster: function (newMaster, auth, options) {
            return exports.ProxyAndUpgradeApiFp(configuration).changeMaster(newMaster, auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the address of the controler contract.
         * @summary Gets address of the controler Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControler: function (options) {
            return exports.ProxyAndUpgradeApiFp(configuration).getControler(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the address of the master contract.
         * @summary Gets address of the Master Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaster: function (options) {
            return exports.ProxyAndUpgradeApiFp(configuration).getMaster(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets address that is delegate called to run a function\'s logic.
         * @summary Gets address of Function
         * @param {string} id The function selector the return the target of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTarget: function (id, options) {
            return exports.ProxyAndUpgradeApiFp(configuration).getTarget(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the address of the Universal Proxy contract.
         * @summary Gets address of the Universal Proxy Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalProxy: function (options) {
            return exports.ProxyAndUpgradeApiFp(configuration).getUniversalProxy(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
         * @summary Pauses the execution
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: function (auth, options) {
            return exports.ProxyAndUpgradeApiFp(configuration).pause(auth, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} id Function selector whose target to change.
         * @param {string} target The address to set the function too
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTarget: function (id, target, auth, options) {
            return exports.ProxyAndUpgradeApiFp(configuration).setTarget(id, target, auth, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ProxyAndUpgradeApi - object-oriented interface
 * @export
 * @class ProxyAndUpgradeApi
 * @extends {BaseAPI}
 */
var ProxyAndUpgradeApi = /** @class */ (function (_super) {
    __extends(ProxyAndUpgradeApi, _super);
    function ProxyAndUpgradeApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sets the new controller address.
     * @summary Sets the the new controller address
     * @param {string} newController The new controller address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.changeController = function (newController, auth, options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).changeController(newController, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} newMaster The new master address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.changeMaster = function (newMaster, auth, options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).changeMaster(newMaster, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the address of the controler contract.
     * @summary Gets address of the controler Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.getControler = function (options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).getControler(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the address of the master contract.
     * @summary Gets address of the Master Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.getMaster = function (options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).getMaster(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets address that is delegate called to run a function\'s logic.
     * @summary Gets address of Function
     * @param {string} id The function selector the return the target of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.getTarget = function (id, options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).getTarget(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the address of the Universal Proxy contract.
     * @summary Gets address of the Universal Proxy Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.getUniversalProxy = function (options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).getUniversalProxy(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
     * @summary Pauses the execution
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.pause = function (auth, options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).pause(auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} id Function selector whose target to change.
     * @param {string} target The address to set the function too
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    ProxyAndUpgradeApi.prototype.setTarget = function (id, target, auth, options) {
        var _this = this;
        return exports.ProxyAndUpgradeApiFp(this.configuration).setTarget(id, target, auth, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProxyAndUpgradeApi;
}(base_1.BaseAPI));
exports.ProxyAndUpgradeApi = ProxyAndUpgradeApi;
