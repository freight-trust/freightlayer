// tslint:disable
/**
 * Freight Document primitiveization Application
 * This is the api reference for creation of 211, 210, and other EDI spec\'d shipping documents.
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: sam@freighttrust.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     * 
     * @type {string}
     * @memberof Auth
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * 
     * @type {Auth}
     * @memberof Body
     */
    blockArrayAuth?: Auth;
    /**
     * 
     * @type {Auth}
     * @memberof Body
     */
    senderAuth?: Auth;
}
/**
 * 
 * @export
 * @interface Body1
 */
export interface Body1 {
    /**
     * 
     * @type {Auth}
     * @memberof Body1
     */
    blockArrayAuth?: Auth;
    /**
     * 
     * @type {Auth}
     * @memberof Body1
     */
    ownerAuth?: Auth;
    /**
     * 
     * @type {Auth}
     * @memberof Body1
     */
    partAuth?: Auth;
}
/**
 * 
 * @export
 * @interface Body2
 */
export interface Body2 {
    /**
     * 
     * @type {Auth}
     * @memberof Body2
     */
    blockArrayAuth?: Auth;
    /**
     * 
     * @type {Auth}
     * @memberof Body2
     */
    ownerAuth?: Auth;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the current message Freight Trust needs to sign to verify their next post request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getNonce`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the current message Freight Trust needs to sign to verify their next post request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonce(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getNonce(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns the current message Freight Trust needs to sign to verify their next post request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce(options?: any): AxiosPromise<ApiResponse> {
            return DefaultApiFp(configuration).getNonce(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Returns the current message Freight Trust needs to sign to verify their next post request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNonce(options?: any) {
        return DefaultApiFp(this.configuration).getNonce(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * EDIPrimitiveApi - axios parameter creator
 * @export
 */
export const EDIPrimitiveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change or reaffirm the approved address for an primitive
         * @param {string} approved The address being approved
         * @param {number} primitiveId The id of the primitive to be approved
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: async (approved: string, primitiveId: number, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'approved' is not null or undefined
            if (approved === null || approved === undefined) {
                throw new RequiredError('approved','Required parameter approved was null or undefined when calling approve.');
            }
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling approve.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling approve.');
            }
            const localVarPath = `/primitive/approve/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Count all primitives assigned to an owner
         * @param {string} owner The address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceOf: async (owner: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling balanceOf.');
            }
            const localVarPath = `/primitive/balanceOf/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows Freight Trust to create a record with the signature of the owner and of the participant.
         * @summary Creates a new record
         * @param {string} recordID The identifying hash of the record
         * @param {string} owner The owner of the record
         * @param {string} participant The address of the participant in the record
         * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: async (recordID: string, owner: string, participant: string, body1: Body1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordID' is not null or undefined
            if (recordID === null || recordID === undefined) {
                throw new RequiredError('recordID','Required parameter recordID was null or undefined when calling createRecord.');
            }
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createRecord.');
            }
            // verify required parameter 'participant' is not null or undefined
            if (participant === null || participant === undefined) {
                throw new RequiredError('participant','Required parameter participant was null or undefined when calling createRecord.');
            }
            // verify required parameter 'body1' is not null or undefined
            if (body1 === null || body1 === undefined) {
                throw new RequiredError('body1','Required parameter body1 was null or undefined when calling createRecord.');
            }
            const localVarPath = `/primitive/createRecord/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recordID !== undefined) {
                localVarQueryParameter['recordID'] = recordID;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (participant !== undefined) {
                localVarQueryParameter['participant'] = participant;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body1 !== undefined ? body1 : {}) : (body1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The approved address for this primitive, or the zero address if there is none
         * @summary Get the approved address for a single primitive
         * @param {number} primitiveId The primitive to find the approved address for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedById: async (primitiveId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling getApprovedById.');
            }
            const localVarPath = `/primitive/getApproved/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * True if `operator` is an approved operator for `owner`, false otherwise
         * @summary Query if an address is an authorized operator for another address
         * @param {string} owner The address that owns the primitives
         * @param {string} operator The address that acts on behalf of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isApprovedForAll: async (owner: string, operator: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling isApprovedForAll.');
            }
            // verify required parameter 'operator' is not null or undefined
            if (operator === null || operator === undefined) {
                throw new RequiredError('operator','Required parameter operator was null or undefined when calling isApprovedForAll.');
            }
            const localVarPath = `/primitive/isApprovedForAll/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (operator !== undefined) {
                localVarQueryParameter['operator'] = operator;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the primitive contract\'s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        name: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/primitive/name`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find the owner of an primitive
         * @param {number} primitiveId The Id of the primitive in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf: async (primitiveId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling ownerOf.');
            }
            const localVarPath = `/primitive/ownerOf/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
         * @param {number} index A counter less than &#x60;totalSupply()&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveByIndex: async (index: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new RequiredError('index','Required parameter index was null or undefined when calling primitiveByIndex.');
            }
            const localVarPath = `/primitive/primitiveByIndex/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
         * @param {string} owner The address of the owner
         * @param {number} index The index of the primitive assigned to the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveOfOwnerByIndex: async (owner: string, index: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling primitiveOfOwnerByIndex.');
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new RequiredError('index','Required parameter index was null or undefined when calling primitiveOfOwnerByIndex.');
            }
            const localVarPath = `/primitive/primitiveOfOwnerByIndex/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enumerate primitives assigned to an owner
         * @param {number} primitiveId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveURIById: async (primitiveId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling primitiveURIById.');
            }
            const localVarPath = `/primitive/primitiveURI/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transfers the ownership of an primitive from one address to another address
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {string} [extraData] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        safeTransferFrom: async (from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling safeTransferFrom.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling safeTransferFrom.');
            }
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling safeTransferFrom.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling safeTransferFrom.');
            }
            const localVarPath = `/primitive/safeTransferFrom/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }

            if (extraData !== undefined) {
                localVarQueryParameter['extraData'] = extraData;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
         * @summary Allows Freight Trust to issue univeral approval
         * @param {string} operator Address to add to the set of authorized operators
         * @param {boolean} approved True if the operator is approved, false to revoke approval
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setApprovalForAll: async (operator: string, approved: boolean, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'operator' is not null or undefined
            if (operator === null || operator === undefined) {
                throw new RequiredError('operator','Required parameter operator was null or undefined when calling setApprovalForAll.');
            }
            // verify required parameter 'approved' is not null or undefined
            if (approved === null || approved === undefined) {
                throw new RequiredError('approved','Required parameter approved was null or undefined when calling setApprovalForAll.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling setApprovalForAll.');
            }
            const localVarPath = `/primitive/setApprovalForAll/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operator !== undefined) {
                localVarQueryParameter['operator'] = operator;
            }

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
         * @summary Signed Transfer
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
         * @param {string} [data] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTransfer: async (from: string, to: string, primitiveId: number, body: Body, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling signedTransfer.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling signedTransfer.');
            }
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling signedTransfer.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling signedTransfer.');
            }
            const localVarPath = `/primitive/signedTransfer/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }

            if (data !== undefined) {
                localVarQueryParameter['data'] = data;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns an interface\'s support status
         * @param {number} interfaceId The Id of the interface to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportsInterfaceById: async (interfaceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'interfaceId' is not null or undefined
            if (interfaceId === null || interfaceId === undefined) {
                throw new RequiredError('interfaceId','Required parameter interfaceId was null or undefined when calling supportsInterfaceById.');
            }
            const localVarPath = `/primitive/supportsInterface/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interfaceId !== undefined) {
                localVarQueryParameter['interfaceId'] = interfaceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the primitive contract\'s symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbol: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/primitive/symbol`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the total supply of Non fungible primitives
         * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/primitive/totalSupply`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
         * @summary Transfer ownership of an primitive without safety checks
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFrom: async (from: string, to: string, primitiveId: number, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling transferFrom.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling transferFrom.');
            }
            // verify required parameter 'primitiveId' is not null or undefined
            if (primitiveId === null || primitiveId === undefined) {
                throw new RequiredError('primitiveId','Required parameter primitiveId was null or undefined when calling transferFrom.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling transferFrom.');
            }
            const localVarPath = `/primitive/transferFrom/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (primitiveId !== undefined) {
                localVarQueryParameter['primitiveId'] = primitiveId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows Freight Trust to version one of the records they own.
         * @summary Versions a record for Freight Trust
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Auth} auth The Freight Trust nonce signature to verify this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecord: async (current: string, _new: string, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'current' is not null or undefined
            if (current === null || current === undefined) {
                throw new RequiredError('current','Required parameter current was null or undefined when calling versionRecord.');
            }
            // verify required parameter '_new' is not null or undefined
            if (_new === null || _new === undefined) {
                throw new RequiredError('_new','Required parameter _new was null or undefined when calling versionRecord.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling versionRecord.');
            }
            const localVarPath = `/primitive/versionRecord/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (_new !== undefined) {
                localVarQueryParameter['new'] = _new;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows Freight Trust to version a record for the owner using the owner\'s signature.
         * @summary Versions a record for the owner
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
         * @param {string} [owner] The owner of the record which will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecordSigned: async (current: string, _new: string, body2: Body2, owner?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'current' is not null or undefined
            if (current === null || current === undefined) {
                throw new RequiredError('current','Required parameter current was null or undefined when calling versionRecordSigned.');
            }
            // verify required parameter '_new' is not null or undefined
            if (_new === null || _new === undefined) {
                throw new RequiredError('_new','Required parameter _new was null or undefined when calling versionRecordSigned.');
            }
            // verify required parameter 'body2' is not null or undefined
            if (body2 === null || body2 === undefined) {
                throw new RequiredError('body2','Required parameter body2 was null or undefined when calling versionRecordSigned.');
            }
            const localVarPath = `/primitive/versionRecord/signed/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (_new !== undefined) {
                localVarQueryParameter['new'] = _new;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body2 !== undefined ? body2 : {}) : (body2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EDIPrimitiveApi - functional programming interface
 * @export
 */
export const EDIPrimitiveApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change or reaffirm the approved address for an primitive
         * @param {string} approved The address being approved
         * @param {number} primitiveId The id of the primitive to be approved
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approve(approved: string, primitiveId: number, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).approve(approved, primitiveId, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Count all primitives assigned to an owner
         * @param {string} owner The address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceOf(owner: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).balanceOf(owner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows Freight Trust to create a record with the signature of the owner and of the participant.
         * @summary Creates a new record
         * @param {string} recordID The identifying hash of the record
         * @param {string} owner The owner of the record
         * @param {string} participant The address of the participant in the record
         * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecord(recordID: string, owner: string, participant: string, body1: Body1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).createRecord(recordID, owner, participant, body1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The approved address for this primitive, or the zero address if there is none
         * @summary Get the approved address for a single primitive
         * @param {number} primitiveId The primitive to find the approved address for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApprovedById(primitiveId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).getApprovedById(primitiveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * True if `operator` is an approved operator for `owner`, false otherwise
         * @summary Query if an address is an authorized operator for another address
         * @param {string} owner The address that owns the primitives
         * @param {string} operator The address that acts on behalf of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isApprovedForAll(owner: string, operator: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).isApprovedForAll(owner, operator, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the primitive contract\'s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async name(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).name(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Find the owner of an primitive
         * @param {number} primitiveId The Id of the primitive in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ownerOf(primitiveId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).ownerOf(primitiveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
         * @param {number} index A counter less than &#x60;totalSupply()&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primitiveByIndex(index: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).primitiveByIndex(index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
         * @param {string} owner The address of the owner
         * @param {number} index The index of the primitive assigned to the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primitiveOfOwnerByIndex(owner: string, index: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).primitiveOfOwnerByIndex(owner, index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Enumerate primitives assigned to an owner
         * @param {number} primitiveId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primitiveURIById(primitiveId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).primitiveURIById(primitiveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Transfers the ownership of an primitive from one address to another address
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {string} [extraData] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async safeTransferFrom(from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).safeTransferFrom(from, to, primitiveId, auth, extraData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
         * @summary Allows Freight Trust to issue univeral approval
         * @param {string} operator Address to add to the set of authorized operators
         * @param {boolean} approved True if the operator is approved, false to revoke approval
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setApprovalForAll(operator: string, approved: boolean, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).setApprovalForAll(operator, approved, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
         * @summary Signed Transfer
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
         * @param {string} [data] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signedTransfer(from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).signedTransfer(from, to, primitiveId, body, data, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns an interface\'s support status
         * @param {number} interfaceId The Id of the interface to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supportsInterfaceById(interfaceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).supportsInterfaceById(interfaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the primitive contract\'s symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async symbol(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).symbol(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the total supply of Non fungible primitives
         * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totalSupply(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).totalSupply(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
         * @summary Transfer ownership of an primitive without safety checks
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferFrom(from: string, to: string, primitiveId: number, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).transferFrom(from, to, primitiveId, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows Freight Trust to version one of the records they own.
         * @summary Versions a record for Freight Trust
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Auth} auth The Freight Trust nonce signature to verify this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionRecord(current: string, _new: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).versionRecord(current, _new, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows Freight Trust to version a record for the owner using the owner\'s signature.
         * @summary Versions a record for the owner
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
         * @param {string} [owner] The owner of the record which will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionRecordSigned(current: string, _new: string, body2: Body2, owner?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EDIPrimitiveApiAxiosParamCreator(configuration).versionRecordSigned(current, _new, body2, owner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EDIPrimitiveApi - factory interface
 * @export
 */
export const EDIPrimitiveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Change or reaffirm the approved address for an primitive
         * @param {string} approved The address being approved
         * @param {number} primitiveId The id of the primitive to be approved
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve(approved: string, primitiveId: number, auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).approve(approved, primitiveId, auth, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Count all primitives assigned to an owner
         * @param {string} owner The address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceOf(owner: string, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).balanceOf(owner, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows Freight Trust to create a record with the signature of the owner and of the participant.
         * @summary Creates a new record
         * @param {string} recordID The identifying hash of the record
         * @param {string} owner The owner of the record
         * @param {string} participant The address of the participant in the record
         * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(recordID: string, owner: string, participant: string, body1: Body1, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).createRecord(recordID, owner, participant, body1, options).then((request) => request(axios, basePath));
        },
        /**
         * The approved address for this primitive, or the zero address if there is none
         * @summary Get the approved address for a single primitive
         * @param {number} primitiveId The primitive to find the approved address for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedById(primitiveId: number, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).getApprovedById(primitiveId, options).then((request) => request(axios, basePath));
        },
        /**
         * True if `operator` is an approved operator for `owner`, false otherwise
         * @summary Query if an address is an authorized operator for another address
         * @param {string} owner The address that owns the primitives
         * @param {string} operator The address that acts on behalf of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isApprovedForAll(owner: string, operator: string, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).isApprovedForAll(owner, operator, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the primitive contract\'s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        name(options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).name(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find the owner of an primitive
         * @param {number} primitiveId The Id of the primitive in question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownerOf(primitiveId: number, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).ownerOf(primitiveId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
         * @param {number} index A counter less than &#x60;totalSupply()&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveByIndex(index: number, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).primitiveByIndex(index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
         * @param {string} owner The address of the owner
         * @param {number} index The index of the primitive assigned to the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveOfOwnerByIndex(owner: string, index: number, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).primitiveOfOwnerByIndex(owner, index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enumerate primitives assigned to an owner
         * @param {number} primitiveId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primitiveURIById(primitiveId: number, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).primitiveURIById(primitiveId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transfers the ownership of an primitive from one address to another address
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {string} [extraData] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        safeTransferFrom(from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).safeTransferFrom(from, to, primitiveId, auth, extraData, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
         * @summary Allows Freight Trust to issue univeral approval
         * @param {string} operator Address to add to the set of authorized operators
         * @param {boolean} approved True if the operator is approved, false to revoke approval
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setApprovalForAll(operator: string, approved: boolean, auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).setApprovalForAll(operator, approved, auth, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
         * @summary Signed Transfer
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
         * @param {string} [data] Optional data to be sent with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signedTransfer(from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).signedTransfer(from, to, primitiveId, body, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns an interface\'s support status
         * @param {number} interfaceId The Id of the interface to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportsInterfaceById(interfaceId: number, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).supportsInterfaceById(interfaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the primitive contract\'s symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbol(options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).symbol(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the total supply of Non fungible primitives
         * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply(options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).totalSupply(options).then((request) => request(axios, basePath));
        },
        /**
         * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
         * @summary Transfer ownership of an primitive without safety checks
         * @param {string} from The sender of the transfer
         * @param {string} to The recipient of the transfer
         * @param {number} primitiveId The id of the primitive to be transferred
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferFrom(from: string, to: string, primitiveId: number, auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return EDIPrimitiveApiFp(configuration).transferFrom(from, to, primitiveId, auth, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows Freight Trust to version one of the records they own.
         * @summary Versions a record for Freight Trust
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Auth} auth The Freight Trust nonce signature to verify this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecord(current: string, _new: string, auth: Auth, options?: any): AxiosPromise<void> {
            return EDIPrimitiveApiFp(configuration).versionRecord(current, _new, auth, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows Freight Trust to version a record for the owner using the owner\'s signature.
         * @summary Versions a record for the owner
         * @param {string} current The identifying hash of the record
         * @param {string} _new The new identifying hash of the record
         * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
         * @param {string} [owner] The owner of the record which will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRecordSigned(current: string, _new: string, body2: Body2, owner?: string, options?: any): AxiosPromise<void> {
            return EDIPrimitiveApiFp(configuration).versionRecordSigned(current, _new, body2, owner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EDIPrimitiveApi - object-oriented interface
 * @export
 * @class EDIPrimitiveApi
 * @extends {BaseAPI}
 */
export class EDIPrimitiveApi extends BaseAPI {
    /**
     * 
     * @summary Change or reaffirm the approved address for an primitive
     * @param {string} approved The address being approved
     * @param {number} primitiveId The id of the primitive to be approved
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public approve(approved: string, primitiveId: number, auth: Auth, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).approve(approved, primitiveId, auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Count all primitives assigned to an owner
     * @param {string} owner The address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public balanceOf(owner: string, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).balanceOf(owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows Freight Trust to create a record with the signature of the owner and of the participant.
     * @summary Creates a new record
     * @param {string} recordID The identifying hash of the record
     * @param {string} owner The owner of the record
     * @param {string} participant The address of the participant in the record
     * @param {Body1} body1 The Freight Trust nonce signature, followed by the owner\&#39;s signature and the participant\&#39;s signature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public createRecord(recordID: string, owner: string, participant: string, body1: Body1, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).createRecord(recordID, owner, participant, body1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The approved address for this primitive, or the zero address if there is none
     * @summary Get the approved address for a single primitive
     * @param {number} primitiveId The primitive to find the approved address for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public getApprovedById(primitiveId: number, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).getApprovedById(primitiveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * True if `operator` is an approved operator for `owner`, false otherwise
     * @summary Query if an address is an authorized operator for another address
     * @param {string} owner The address that owns the primitives
     * @param {string} operator The address that acts on behalf of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public isApprovedForAll(owner: string, operator: string, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).isApprovedForAll(owner, operator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the primitive contract\'s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public name(options?: any) {
        return EDIPrimitiveApiFp(this.configuration).name(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find the owner of an primitive
     * @param {number} primitiveId The Id of the primitive in question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public ownerOf(primitiveId: number, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).ownerOf(primitiveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the primitive identifier of the `index`-th primitive tracked by the contract
     * @param {number} index A counter less than &#x60;totalSupply()&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public primitiveByIndex(index: number, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).primitiveByIndex(index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the primitive identifier of the `index`-th primitive assigned to the `owner`
     * @param {string} owner The address of the owner
     * @param {number} index The index of the primitive assigned to the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public primitiveOfOwnerByIndex(owner: string, index: number, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).primitiveOfOwnerByIndex(owner, index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enumerate primitives assigned to an owner
     * @param {number} primitiveId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public primitiveURIById(primitiveId: number, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).primitiveURIById(primitiveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transfers the ownership of an primitive from one address to another address
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {string} [extraData] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public safeTransferFrom(from: string, to: string, primitiveId: number, auth: Auth, extraData?: string, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).safeTransferFrom(from, to, primitiveId, auth, extraData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable or disable approval for a third party (`operator`) to manage all of Freight Trust\'s assets
     * @summary Allows Freight Trust to issue univeral approval
     * @param {string} operator Address to add to the set of authorized operators
     * @param {boolean} approved True if the operator is approved, false to revoke approval
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public setApprovalForAll(operator: string, approved: boolean, auth: Auth, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).setApprovalForAll(operator, approved, auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows Freight Trust to sign and transfer a EDI Primitive on the behalf of its holder
     * @summary Signed Transfer
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Body} body The Freight Trust authorization signature followed by the signature of the sender of the transfer.
     * @param {string} [data] Optional data to be sent with the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public signedTransfer(from: string, to: string, primitiveId: number, body: Body, data?: string, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).signedTransfer(from, to, primitiveId, body, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns an interface\'s support status
     * @param {number} interfaceId The Id of the interface to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public supportsInterfaceById(interfaceId: number, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).supportsInterfaceById(interfaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the primitive contract\'s symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public symbol(options?: any) {
        return EDIPrimitiveApiFp(this.configuration).symbol(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the total supply of Non fungible primitives
     * @summary An API endpoint to get the total supply of primitives in the ERC721 contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public totalSupply(options?: any) {
        return EDIPrimitiveApiFp(this.configuration).totalSupply(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows Freight Trust to tranfer primitives unsafely -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING primitiveS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @summary Transfer ownership of an primitive without safety checks
     * @param {string} from The sender of the transfer
     * @param {string} to The recipient of the transfer
     * @param {number} primitiveId The id of the primitive to be transferred
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public transferFrom(from: string, to: string, primitiveId: number, auth: Auth, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).transferFrom(from, to, primitiveId, auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows Freight Trust to version one of the records they own.
     * @summary Versions a record for Freight Trust
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Auth} auth The Freight Trust nonce signature to verify this action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public versionRecord(current: string, _new: string, auth: Auth, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).versionRecord(current, _new, auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows Freight Trust to version a record for the owner using the owner\'s signature.
     * @summary Versions a record for the owner
     * @param {string} current The identifying hash of the record
     * @param {string} _new The new identifying hash of the record
     * @param {Body2} body2 The Freight Trust nonce signature followed by the owner\&#39;s signature
     * @param {string} [owner] The owner of the record which will be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EDIPrimitiveApi
     */
    public versionRecordSigned(current: string, _new: string, body2: Body2, owner?: string, options?: any) {
        return EDIPrimitiveApiFp(this.configuration).versionRecordSigned(current, _new, body2, owner, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ProxyAndUpgradeApi - axios parameter creator
 * @export
 */
export const ProxyAndUpgradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets the new controller address.
         * @summary Sets the the new controller address
         * @param {string} newController The new controller address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeController: async (newController: string, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newController' is not null or undefined
            if (newController === null || newController === undefined) {
                throw new RequiredError('newController','Required parameter newController was null or undefined when calling changeController.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling changeController.');
            }
            const localVarPath = `/proxy/changeController/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (newController !== undefined) {
                localVarQueryParameter['newController'] = newController;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} newMaster The new master address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMaster: async (newMaster: string, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newMaster' is not null or undefined
            if (newMaster === null || newMaster === undefined) {
                throw new RequiredError('newMaster','Required parameter newMaster was null or undefined when calling changeMaster.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling changeMaster.');
            }
            const localVarPath = `/proxy/changeMaster/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (newMaster !== undefined) {
                localVarQueryParameter['newMaster'] = newMaster;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the address of the controler contract.
         * @summary Gets address of the controler Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControler: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/proxy/getControler`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the address of the master contract.
         * @summary Gets address of the Master Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaster: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/proxy/getMaster`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets address that is delegate called to run a function\'s logic.
         * @summary Gets address of Function
         * @param {string} id The function selector the return the target of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTarget: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTarget.');
            }
            const localVarPath = `/proxy/getTarget/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the address of the Universal Proxy contract.
         * @summary Gets address of the Universal Proxy Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalProxy: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/proxy/getUniversalProxy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
         * @summary Pauses the execution
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: async (auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling pause.');
            }
            const localVarPath = `/proxy/pause`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} id Function selector whose target to change.
         * @param {string} target The address to set the function too
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTarget: async (id: string, target: string, auth: Auth, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setTarget.');
            }
            // verify required parameter 'target' is not null or undefined
            if (target === null || target === undefined) {
                throw new RequiredError('target','Required parameter target was null or undefined when calling setTarget.');
            }
            // verify required parameter 'auth' is not null or undefined
            if (auth === null || auth === undefined) {
                throw new RequiredError('auth','Required parameter auth was null or undefined when calling setTarget.');
            }
            const localVarPath = `/proxy/setTarget/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof auth !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(auth !== undefined ? auth : {}) : (auth || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProxyAndUpgradeApi - functional programming interface
 * @export
 */
export const ProxyAndUpgradeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sets the new controller address.
         * @summary Sets the the new controller address
         * @param {string} newController The new controller address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeController(newController: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).changeController(newController, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} newMaster The new master address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeMaster(newMaster: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).changeMaster(newMaster, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the address of the controler contract.
         * @summary Gets address of the controler Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getControler(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).getControler(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the address of the master contract.
         * @summary Gets address of the Master Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMaster(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).getMaster(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets address that is delegate called to run a function\'s logic.
         * @summary Gets address of Function
         * @param {string} id The function selector the return the target of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTarget(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).getTarget(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the address of the Universal Proxy contract.
         * @summary Gets address of the Universal Proxy Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniversalProxy(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).getUniversalProxy(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
         * @summary Pauses the execution
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pause(auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).pause(auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} id Function selector whose target to change.
         * @param {string} target The address to set the function too
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setTarget(id: string, target: string, auth: Auth, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await ProxyAndUpgradeApiAxiosParamCreator(configuration).setTarget(id, target, auth, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProxyAndUpgradeApi - factory interface
 * @export
 */
export const ProxyAndUpgradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sets the new controller address.
         * @summary Sets the the new controller address
         * @param {string} newController The new controller address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeController(newController: string, auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).changeController(newController, auth, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} newMaster The new master address
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMaster(newMaster: string, auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).changeMaster(newMaster, auth, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the address of the controler contract.
         * @summary Gets address of the controler Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControler(options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).getControler(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the address of the master contract.
         * @summary Gets address of the Master Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaster(options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).getMaster(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets address that is delegate called to run a function\'s logic.
         * @summary Gets address of Function
         * @param {string} id The function selector the return the target of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTarget(id: string, options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).getTarget(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the address of the Universal Proxy contract.
         * @summary Gets address of the Universal Proxy Contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniversalProxy(options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).getUniversalProxy(options).then((request) => request(axios, basePath));
        },
        /**
         * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
         * @summary Pauses the execution
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause(auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).pause(auth, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
         * @summary Sets the address of Function
         * @param {string} id Function selector whose target to change.
         * @param {string} target The address to set the function too
         * @param {Auth} auth The Freight Trust signature of the nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTarget(id: string, target: string, auth: Auth, options?: any): AxiosPromise<ApiResponse> {
            return ProxyAndUpgradeApiFp(configuration).setTarget(id, target, auth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProxyAndUpgradeApi - object-oriented interface
 * @export
 * @class ProxyAndUpgradeApi
 * @extends {BaseAPI}
 */
export class ProxyAndUpgradeApi extends BaseAPI {
    /**
     * Sets the new controller address.
     * @summary Sets the the new controller address
     * @param {string} newController The new controller address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public changeController(newController: string, auth: Auth, options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).changeController(newController, auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} newMaster The new master address
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public changeMaster(newMaster: string, auth: Auth, options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).changeMaster(newMaster, auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the address of the controler contract.
     * @summary Gets address of the controler Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public getControler(options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).getControler(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the address of the master contract.
     * @summary Gets address of the Master Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public getMaster(options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).getMaster(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets address that is delegate called to run a function\'s logic.
     * @summary Gets address of Function
     * @param {string} id The function selector the return the target of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public getTarget(id: string, options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).getTarget(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the address of the Universal Proxy contract.
     * @summary Gets address of the Universal Proxy Contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public getUniversalProxy(options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).getUniversalProxy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls the pause method in the universal proxy, blocking any state changes while Blockarray updates.
     * @summary Pauses the execution
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public pause(auth: Auth, options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).pause(auth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets address that is delegate called to run a function\'s logic. This function must be called with an signed nonce from the Freight Trust account in the https body.
     * @summary Sets the address of Function
     * @param {string} id Function selector whose target to change.
     * @param {string} target The address to set the function too
     * @param {Auth} auth The Freight Trust signature of the nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyAndUpgradeApi
     */
    public setTarget(id: string, target: string, auth: Auth, options?: any) {
        return ProxyAndUpgradeApiFp(this.configuration).setTarget(id, target, auth, options).then((request) => request(this.axios, this.basePath));
    }

}


